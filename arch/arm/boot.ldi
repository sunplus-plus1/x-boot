#include "include/config.h"
OUTPUT_FORMAT("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")
OUTPUT_ARCH(arm)
ENTRY(_start)

#ifdef PLATFORM_SPIBAREMETAL
#define ROM_BASE 0x98000000 /* spi baremetal boot */
#else
#define ROM_BASE 0xffff0000 /* ROM code */
#endif

#ifdef CONFIG_USE_ZMEM
#define XBOOT_ADDR    ZMEM_XBOOT_ADDR
#else
#define XBOOT_ADDR    SRAM0_BASE
#endif

MEMORY
{

	romshare        : ORIGIN = ROM_BASE + 0x0400  , LENGTH = 4K

#if defined(PLATFORM_Q628) && (CONFIG_PLATFORM_IC_REV < 2)
	/* SRAM layout for Q628 1st revision */
	xboot_buf       : ORIGIN = XBOOT_ADDR, LENGTH = XBOOT_BUF_SIZE      /*    28K @ 0        */
	storage_buf     : ORIGIN = 0x9e807000, LENGTH = STORAGE_BUF_SIZE    /*     9K @ 28K      */
	bootinfo        : ORIGIN = 0x9e809400, LENGTH = BOOTINFO_SIZE       /*    512 @ 37K      */
	boothead        : ORIGIN = 0x9e809600, LENGTH = GLOBAL_HEADER_SIZE  /*    512 @ 37K+512  */
	cdata           : ORIGIN = 0x9e809800, LENGTH = CDATA_SIZE          /*    512 @ 38K      */
	stack           : ORIGIN = 0x9e809a00, LENGTH = STACK_SIZE          /*   1472 @ 38K+512  */
	bootcompat      : ORIGIN = 0x9e809fc0, LENGTH = 64                  /*     64 @ 40K-64   */
#else
	/* new SRAM layout */
	xboot_buf       : ORIGIN = XBOOT_ADDR, LENGTH = XBOOT_BUF_SIZE      /*    27K @ 0        */
	boothead        : ORIGIN = 0x9e806c00, LENGTH = GLOBAL_HEADER_SIZE  /*    512 @ 27K      */
	bootinfo        : ORIGIN = 0x9e806e00, LENGTH = BOOTINFO_SIZE       /*    384 @ 27K+768  */
	cdata           : ORIGIN = 0x9e806f80, LENGTH = CDATA_SIZE          /*    128 @ 27K+512  */
	/* storage_buf is part of ed25519_verify()'s stack (need 4K) */
	storage_buf     : ORIGIN = 0x9e807000, LENGTH = STORAGE_BUF_SIZE    /*     9K @ 28K      */
	stack           : ORIGIN = 0x9e809400, LENGTH = STACK_SIZE          /*  3K-64 @ 37K      */
	bootcompat      : ORIGIN = 0x9e809fc0, LENGTH = 64                  /*     64 @ 40K-64   */
#endif
}

SECTIONS
{
	/* ROM */
	.romshare :
	{
		__rom_vsr_base = .;
	} > romshare

	.xhdr (NOLOAD):
	{
		*(xboot_header_sect)
	} > xboot_buf

	/* RAM */
	.text (XBOOT_ADDR + 0x20) :
	{
		start.o (.text*)
		*(.rodata*)
		*(.text*)
		__etext = .;
	} > xboot_buf

        .data : AT (__etext)
	{
		__data = .;
		*(.data*)
		__edata = .;
	} > cdata

	.bootinfo (NOLOAD):
	{
		*(bootinfo_sect)
	} > bootinfo

	.boothead (NOLOAD):
	{
		*(boothead_sect)
	} > boothead

	.storage_buf (NOLOAD):
	{
		__storage_buf_beg = .;
		*(storage_buf_sect)
		__except_stack_top = __storage_buf_beg + STORAGE_BUF_SIZE ; /* borrow storage buf end */
	} > storage_buf

	.bss :
	{
		__bss_start = .;
		*(.bss)
		*(.bss.*)
		*(.sbss)
		*(.sbss.*)
		*(COMMON)
		. = ALIGN(4);
		__bss_end__ = .;
	} > cdata

	.stack :
	{
		__stack_base = .;
		__stack_top = __stack_base + STACK_SIZE;
	} > stack
}
