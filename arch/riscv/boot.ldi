#include "include/config.h"
OUTPUT_FORMAT("elf64-littleriscv", "elf64-littleriscv",	      "elf64-littleriscv")
OUTPUT_ARCH( "riscv" )
ENTRY(start)

#ifdef PLATFORM_SPIBAREMETAL
#define ROM_BASE SPI_FLASH_BASE /* spi baremetal boot */
#else
#define ROM_BASE 0xFE000000 /* ROM code */
#endif

#ifdef CONFIG_USE_ZMEM
#define XBOOT_ADDR    ZMEM_XBOOT_ADDR
#else
#define XBOOT_ADDR    SRAM0_BASE
#endif

MEMORY
{
	romshare        : ORIGIN = ROM_BASE + 0x0400, LENGTH = 4K

	/* new SRAM layout */
	xboot_buf       : ORIGIN = XBOOT_ADDR,        LENGTH = XBOOT_BUF_SIZE      /*    38K @ 0        */
	boothead        : ORIGIN = SRAM0_BASE+0x9800, LENGTH = GLOBAL_HEADER_SIZE  /*    512 @ 38K      */
	bootinfo        : ORIGIN = SRAM0_BASE+0x9a00, LENGTH = BOOTINFO_SIZE       /*    384 @ 38K+512  */
	cdata           : ORIGIN = SRAM0_BASE+0x9b80, LENGTH = CDATA_SIZE          /*    128 @ 38K+896  */
	/* storage_buf is part of ed25519_verify()'s stack (need 4K) */
	storage_buf     : ORIGIN = SRAM0_BASE+0x9c00, LENGTH = STORAGE_BUF_SIZE    /*    22K @ 39K      */
	stack           : ORIGIN = SRAM0_BASE+0xf400, LENGTH = STACK_SIZE          /*  3K-64 @ 61K      */
	bootcompat      : ORIGIN = SRAM0_BASE+0xffc0, LENGTH = 64                  /*     64 @ 64K-64   */
}

SECTIONS
{
	/* ROM */
	.romshare :
	{
		__rom_vsr_base = .;
	} > romshare

	.xhdr (NOLOAD):
	{
		*(xboot_header_sect)
	} > xboot_buf

	/* RAM */
	.text (XBOOT_ADDR + 0x20) :
	{
		arch/riscv/start.o (.text*)
		*(.rodata*)
		*(.text*)
		__etext = .;
	} > xboot_buf

        .data : AT (__etext)
	{
		__data = .;
		*(.data*)
		__edata = .;
	} > cdata

	.bootinfo (NOLOAD):
	{
		__boot_info_beg = .;
		*(bootinfo_sect)
		__boot_info_tmp_value = __boot_info_beg + BOOTINFO_SIZE ;
	} > bootinfo

	.boothead (NOLOAD):
	{
		*(boothead_sect)
	} > boothead

	.storage_buf (NOLOAD):
	{
		__storage_buf_beg = .;
		*(storage_buf_sect)
		__except_stack_top = __storage_buf_beg + STORAGE_BUF_SIZE ; /* borrow storage buf end */
	} > storage_buf

	.bss :
	{
		__bss_start = .;
		*(.bss)
		*(.bss.*)
		*(.sbss)
		*(.sbss.*)
		*(.gnu.linkonce.b.*)
		*(COMMON)
		__bss_end__ = .;
	} > cdata

	.stack :
	{
		__stack_base = .;
		__stack_top = __stack_base + STACK_SIZE;
	} > stack

	.bootcompat :
	{
		__boot_info_tmp_value = . ;
	} > bootcompat
}
